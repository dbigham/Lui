notebook:
	ses "-"? 10 -> "SES10.nb"
	bangabandhu|bangladesh "-"? 1 -> "Bangabandhu-1.nb"
	jcsat 16 -> "Jcsat16.nb"
	how? add|create|new answer -> "HowAddAnswer.nb"
	how? update|save answer -> "HowUpdateAnswer.nb"
	how? (format|formatted|formatting) answer -> "HowFormattedAnswer.nb"
	send formatted answer back to? (client|ui)? -> "SendFormattedAnswerBack.nb"
	how restore clipboard -> "HowRestoreClipboard.nb"
	tesla 2016 -> "Tesla2016.nb"
	((tech|technology) journal 2016) | (2016 (tech|technology) journal) -> "TechJournal2016.nb"
	displays|display|screen|tvs|resolution -> "Displays.nb"
	automation -> "Automation.nb"
	~spacex 2016 -> "SpaceX2016.nb"
	how performance|runtime|speed testing|tests -> "HowPerformanceTesting.nb"
	how metrics -> "HowMetrics.nb"
	how lucene -> "HowLucene.nb"
	how? dependency|dep download|management -> "HowDependencyDownload.nb"
	(personal how) | (how personal) -> "PersonalHow.nb"
	how unit testing -> "HowUnitTesting.nb"
	gsthst | "gst hst" | "gst/hst" | gst | hst -> "GSTHST.nb"
	scrap nb -> "ScrapNB.nb"
	how? function|func lookup|map -> "HowFunctionLookup.nb"
	mocha -> "Mocha.nb"
	npm | node | "node.js" -> "npm.nb"
	how? importing|import (functions|funcs)? -> "HowImportingFunctions.nb"
	how linguistics|linguistic|ling -> "HowLinguistics.nb"
	how design? decisions -> "HowDesignDecisions.nb"
	how intents -> "HowIntents.nb"
	tagging|tagger webpage|page|html -> "TaggingWebpage.nb"
	craig -> "Craig.nb"
	how sync -> "HowSync.nb"
	to watch -> "ToWatch.nb"
	create|new droplet -> "CreateDroplet.nb"
	do | "digital ocean" -> "DigitalOcean.nb"
	(how usage (examples|example)?) | (how (examples|example)) -> "HowUsageExamples.nb"
	"how value"|"value proposition"|"timing savings"|"time saving" -> "HowValue.nb"
	(how remote? (install|upload)) | "install how" -> "HowInstall.nb"
	how domain | "howtwo.ca" -> "HowDomain.nb"
	ssh keys|key -> "SSHKeys.nb"
	how leftover todos|todo -> "HowLeftoverTodos.nb"
	how search nb -> "HowSearch.nb"
	how add? answer? to? (existing|(existing question)) -> "HowAddAnswerToQuestion.nb"
	how preprocessor -> "HowPreprocessor.nb"
	watch|tail how log -> "WatchHowLog.nb"
	lui? rule explosion -> "LuiRuleExplosion.nb"
	lui? dynamic rule creation -> "DynamicRuleCreation.nb"
	lui pattern? matching -> "LuiPatternMatching.nb"
	"i'm" feeling lucky -> "I'mFeelingLucky.nb"
	how? research ui -> "HowResearchUI.nb"
	how? autohotkey|ahk (script|plugin)? -> "HowAutoHotKeyScript.nb"
	how edit answer ui? -> "HowEditAnswer.nb"
	how? ide -> "HowIDE.nb"
	how bottom|status bar -> "HowBottomBar.nb"
	how? (add|create|new|save)? answer ui -> "HowAddAnswerUI.nb"
	how parts -> "HowParts.nb"
	how done -> "HowDone.nb"
	how (related|similar)? sites -> "HowRelatedSites.nb"
	how log -> "HowLog.nb"
	how thoughts|ideas -> "HowThoughts.nb"
	about how -> "AboutHow.nb"
	how feeling of things -> "HowFeelingOfThings.nb"
	how debug -> "HowDebug.nb"
	how scripts|aliases -> "HowScriptsAndAliases.nb"
	how scrap -> "HowScrap.nb"
	how issues -> "HowIssues.nb"
	how questions -> "HowQuestions.nb"
	vimscript | "vim script" | "vi script" | viscript -> "Vimscript.nb"
	vim|vi plugins|plugin -> "VimPlugins.nb"
	unit testing -> "UnitTesting.nb"
	how vi|vim plugin -> "HowViPlugin.nb"
	hugo larochelle? -> "HugoLarochelle.nb"
	hierarchical output layer -> "HierarchicalOutputLayer.nb"
	repl -> "REPL.nb"
	nice design|designs -> "NiceDesign.nb"
	mkyong | "mkyong.com" -> "Mkyong.nb"
	vi | vim -> "vim.nb"
	free photos -> "FreePhotos.nb"
	~chandler people -> "ChandlerMowatPeople.nb"
	how brainstorming -> "HowBrainstorming.nb"
	((top|"most popular") programming? (languages|language)) | (programming? (languages|language) popularity) -> "TopProgrammingLanguages.nb"
	wandbox -> "Wandbox.nb"
	ideone -> "ideone.nb"
	codepad | "code pad" | "codepad.org" -> "codepad.nb"
	sandbox -> "Sandbox.nb"
	how content? ui -> "HowContentUI.nb"
	how http? server -> "HowHTTPServer.nb"
	how (text|solution)? file? parsing -> "HowTextFileParsing.nb"
	how syntax -> "HowSyntax.nb"
	ace ide? -> "Ace.nb"
	coliru -> "Coliru.nb"
	how? syntax highlighting|highlight|highlighter -> "HowSyntaxHighlighting.nb"
	how search (box|field)? -> "HowSearchBox.nb"
	how design|ui -> "HowDesign.nb"
	project|idea impulses -> "Impulses.nb"
	parse forest pruning|evaluation -> "ParseForestPruning.nb"
	anderson|andersen m? -> "AndersonM.nb"
	sleep mode? -> "Sleep.nb"
	(internet|wifi)? router -> "Router.nb"
	modem -> "Modem.nb"
	lui ("command line" | cmd | main) -> "LuiCommandLine.nb"
	LetterToSelfForOct262016 -> "LetterToSelfForOct262018.nb"
	bash -> "Bash.nb"
	dykstra for? nlu -> "DykstraForNLU.nb"
	dirichlet -> "Dirichlet.nb"
	
	dirichlet distribution
		"DirichletDistribution2.nb"
	
	~lm | ((~nlu | ~lang) (models | modeling)) | nlpmodels
		"NlpModels.nb"
	
	enter? food prices
		"EnterFoodPrices.nb"
	
	enter? food store? locations
		"EnterFoodStoreLocations.nb"
	
	semantics -> "Semantics.nb"
	
	sequence parser? learning?
		"SequenceParserLearning.nb"
	
	learning -> "Learning.nb"
	
	(books and courses) | books | courses | "courses and books"
		"BooksAndCourses.nb"
	
	probability -> "Probability.nb"
	
	(coursera nlp) | (nlp coursera) -> "CourseraNlp.nb"
	
	(coursera pgm) | (pgm coursera) -> "CourseraPgm.nb"
	
	(machine | ml) learning
		"MachineLearning.nb"
	
	(neural (networks | net | nets)) | neural
		"NeuralNetworks.nb"
	
	(recurrent | ("recurrent neural" (nets | networks)) | rnn | rnns)
		"Recurrent.nb"
	
	columbia ~nlu -> "ColumbiaNlp.nb"
	
	grammar -> "Grammar.nb"
	
	(semantic inference) | SemanticInference
		"SemanticInference.nb"
	
	semantic graph -> "SemanticGraph.nb"
	
	nlu -> "NLU.nb"
	
	(entity | entities) -> "Entities.nb"
	
	eli game -> "EliGame.nb"
	
	personal -> "Personal.nb"
	
	~kn (language? smoothing)? -> "KneserNey.nb"
	
	(nlp | "language model")? smoothing techniques?
		"Smoothing.nb"
	
	~lm? pruning count?
		"LanguageModelPruning.nb"
	
	katz (language? (smoothing | discounting | discount | backoff))?
		"Katz.nb"
	
	continuation probability
		"ContinuationProbability.nb"
	
	~kn paper -> "KneserNeyPaper.nb"
	
	poset -> "Poset.nb"
	
	good turing -> "GoodTuring.nb"
	
	mkns | (modified ~kn smoothing?)
		"ModifiedKneserNey.nb"
	
	perplexity -> "Perplexity.nb"
	
	cross entropy -> "CrossEntropy.nb"
	
	~kn (equations | equation) -> "KnEquations.nb"
	
	(hidden markov (model | models)) | (hmm)
		"HMM.nb"
	
	~my? ~bb? "z10" (phone | smartphone | device)?
		"Z10.nb"
	
	(tech | technology) synergy -> "TechSynergy.nb"
	
	(semantics | semantic) ideas -> "SemanticsIdeas.nb"
	
	sha | ("sorted hash association" "sorted hash array" SortedHashAssociation SortedHashArray)
		"Sha.nb"
	
	jlink -> "JLink.nb"
	
	matrices | matrixes | (matrix) -> "Matrices.nb"
	
	"sparse array" | (sparsearray) -> "SparseArray.nb"
	
	ngrams -> "NGrams.nb"
	
	~curt -> "CurtisBeattie.nb"
	
	((linguistic | linguistics) (bindings | binding | mapping | mappings)) | ((bindings | binding | mapping | mappings) (linguistic | linguistics))
		"LinguisticBindings.nb"
	
	(Linguistics | spellings) -> "Linguistics.nb"
	
	ARPA -> "ARPA.nb"
	
	vs | ("Visual Studio") -> "VisualStudio.nb"
	
	~lang? model? (corpi | corpora | corpus)
		"Corpus.nb"
	
	SRILM -> "SRILM.nb"
	
	(~lm | ~nlu) (software | tools | toolkit | toolkits)
		"LanguageModelSoftware.nb"
	
	Kylm -> "Kylm.nb"
	
	profile | profiler | profiling | "djb profiler" | "my profiler" | (DjbProfiler)
		"DjbProfiler.nb"
	
	(owl | "owl2") -> "OWL.nb"
	
	(mtrott (resources | papers | books)) | ((resources | papers | books) mtrott)
		"mtrottResources.nb"
	
	(entity | semantic | semantics) (papers | books | resources)
		"EntityPapers.nb"
	
	entity terms -> "EntityTerms.nb"
	
	Postbox -> "Postbox.nb"
	
	Formatting -> "Formatting.nb"
	
	floss | flossing -> "Flossing.nb"
	
	~ling | generalization | ((learn | learning)? ~ling? (From | by) (example | Examples))
		"LinguisticsFromExamples.nb"
	
	c code? -> "C.nb"
	
	memory -> "Memory.nb"
	
	SortedHashAssociation | (Sorted Hash (Association | array))
		"SortedHashAssociation.nb"
	
	mx (file | files)? -> "MX.nb"
	
	~libri corpus? -> "Librispeech.nb"
	
	matrix inversion example
		"MatrixInversionExample.nb"
	
	semantic (concepts | concept)
		"SemanticConcepts.nb"
	
	spaces vs tabs -> "SpacesVsTabs.nb"
	
	git -> "Git.nb"
	
	low hanging fruit
		"LowHangingFruit.nb"
	
	~bot | assistants | (virtual? digital assistants)
		"DigitalAssistants.nb"
	
	wlprofiling | "wl profiling" | mprofiling | "m profiling" | "mathematica profiling"
		"WLProfiling.nb"
	
	DateDifference | (date difference) -> "DateDifference.nb"
	
	"data bin" | (Databin) -> "Databin.nb"
	
	sc -> "SC.nb"
	
	twins? hernia -> "Hernia.nb"
	
	olive -> "Olive.nb"
	
	emma -> "Emma.nb"
	
	twins -> "Twins.nb"
	
	help? grandma -> "Grandma.nb"
	
	compassion canada? -> "Compassion.nb"
	
	model 3 -> "Model3.nb"
	
	(concept | concepts) (library | lib) -> "ConceptLibrary.nb"
	
	concepts -> "Concepts.nb"
	
	tesla -> "Tesla.nb"
	
	acars | ((autonomous | auton | "self driving" | "self-driving") (cars | vehicles | car | vehicle | driving)?)
		"AutonomousCars.nb"
	
	techj | ((tech | technology) journal) -> "TechJournal.nb"
	
	key concepts -> "KeyConcepts.nb"
	
	hyperloop -> "Hyperloop.nb"
	
	bo | (blue origin) -> "BlueOrigin.nb"
	
	~spacex -> "SpaceX.nb"
	
	diaper changes -> "DiaperChanges.nb"
	
	~ps -> "Photostar.nb"
	
	(man | men | people)? on? the? moon -> "PeopleOnMoon.nb"
	
	space -> "Space.nb"
	
	genetics -> "Genetics.nb"
	
	mars -> "Mars.nb"
	
	fh | (falcon heavy) -> "FalconHeavy.nb"
	
	verbs -> "Verbs.nb"
	
	cgel (ch | chapter) 3 notes -> "CgelCh3Notes.nb"
	
	internet (problem | problems)? -> "InternetProblems.nb"
	
	fusion -> "Fusion.nb"
	
	powerwall -> "Powerwall.nb"
	
	solar power? -> "Solar.nb"
	
	its | syncforitunes | itunessync | "itunes sync" | "sync for itunes" | sync
		"SyncForITunes.nb"
	
	superchargers -> "Superchargers.nb"
	
	(random | rand) ideas -> "RandomIdeas.nb"
	
	hazel -> "Hazel.nb"
	
	graham huber? -> "Graham.nb"
	
	(consciousness | cons | consc) -> "Consciousness.nb"
	
	(association | assoc | associations) -> "Association.nb"
	
	lens -> "Lens.nb"
	
	sponsor (child | children)
		"SponsorChildren.nb"
	
	nominal -> "Nominal.nb"
	
	~lm papers
		"LanguageModelPapers.nb"
	
	datasets | dataset | (data (sets | set))
		"DataSets.nb"
	
	mongodb | (mongo db) | mongo -> "MongoDb.nb"
	
	frameworks -> "Frameworks.nb"
	
	(satellite | sat) internet
		"SatelliteInternet.nb"
	
	markdown | md | "md file" | "md files" | "README.md" | readme | "readme md"
		"ReadmeMd.nb"
	
	science -> "Science.nb"
	
	(storage | ssd) -> "Storage.nb"
	
	(iot | "internet of things") -> "IoT.nb"
	
	teksavvy | (tek savvy) -> "TekSavvy.nb"
	
	florida -> "Florida.nb"
	
	commercial crew -> "CommercialCrew.nb"
	
	virgin galactic -> "VirginGalactic.nb"
	
	tesla energy -> "TeslaEnergy.nb"
	
	gigafactory -> "Gigafactory.nb"
	
	pop -> "Pop.nb"
	
	bloom filter -> "BloomFilter.nb"
	
	perfect hash -> "PerfectHash.nb"
	
	flight (simulator | sim)
		"FlightSimulator.nb"
	
	gathering church? -> "Gathering.nb"
	
	(gpu | gpus) -> "GPU.nb"
	
	(cpu | cpus) -> "CPU.nb"
	
	vr | ("virtual reality") -> "VR.nb"
	
	("ses9" | "ses 9" | "ses-9") -> "ses9.nb"
	
	"39a" | (lc "-"? "39a") -> "LC39A.nb"
	
	brownsville | (boca chica) -> "BocaChica.nb"
	
	"arpa sample" | (sample arpa file?) -> "SampleARPA.nb"
	
	("sample arpa" file?) | (arpa sample) -> "SampleARPA.nb"
	
	graphics -> "Graphics.nb"
	
	(windows | win) 10 -> "Windows10.nb"
	
	(likelihood) | "log likelihood" -> "Likelihood.nb"
	
	(robotics | robots) -> "Robotics.nb"
	
	"package delivery" | ((autonomous | automated) package? delivery)
		"AutonomousDelivery.nb"
	
	(drones | uav | uavs) -> "Drones.nb"
	
	(disease | diseases) -> "Disease.nb"
	
	ev | evs | (electric (vehicles | vehicle))
		"ElectricVehicles.nb"
	
	list -> "List.nb"
	
	packed (array | arrays) -> "PackedArray.nb"
	
	check packed (array | arrays)
		"PackedArrayCheck.nb"
	
	(canonical | example) sentences
		"CanonicalSentences.nb"
	
	passports -> "Passports.nb"
	
	"words as vectors" | "words as a vector" | "word as a vector" | (word (embeddings | embedding | vector | vectors))
		"WordVectors.nb"
	
	release ~ps
		"ReleasePhotoStar.nb"
	
	barge (landings | landing) -> "BargeLandings.nb"
	
	land (landings | landing) -> "LandLandings.nb"
	
	(c | "c++") code
		"IntegratingCCode.nb"
	
	(c | "c++") (library | lib | libraries) -> "CLibraries.nb"
	
	librarylink | (library link) -> "LibraryLink.nb"
	
	("visual studio" | vs) 2013
		"VisualStudio2013.nb"
	
	ProcessLink | (process link) -> "ProcessLink.nb"
	
	(ai | "artificial intelligence") -> "AI.nb"
	
	crs "-"? 8
		VaScore["crs8.nb", 0.99]
	
	income? (taxes | tax) -> "Taxes.nb"
	
	PacletInfo | (paclet info) -> "PacletInfo.nb"
	
	profile (picture | photo)? -> "ProfilePicture.nb"
	
	asds | (drone ships) -> "DroneShips.nb"
	
	(~spacex constellation) | (~spacex? ((satellite | satellites | sat) | ((satellite | satellites | sat) (constellation | const))) (constellation | const)?)
		"SpaceXConstellation.nb"
	
	(paclets | paclet) -> "Paclets.nb"
	
	polysemy -> "Polysemy.nb"
	
	"machine learning" | (ml) -> "ML.nb"
	
	(probabilistic | prob) programming
		"ProbabilisticProgramming.nb"
	
	wsd | (word sense disambiguation)
		"WordSenseDisambiguation.nb"
	
	svd | (singular value decomposition)
		"SingularValueDecomposition.nb"
	
	lsi | lsa | (latent semantic indexing)
		"LatentSemanticIndexing.nb"
	
	pcfin | (presidents choice financial?)
		"PresidentsChoice.nb"
	
	itir | (introduction to information retrieval)
		"IntroductionToInformationRetrieval.nb"
	
	livingston -> "Livingston.nb"
	
	"o4a" | "one4another" | (one 4 another) -> "One4Another.nb"
	
	sls -> "SLS.nb"
	
	logistic regression
		"LogisticRegression.nb"
	
	clustering -> "Clustering.nb"
	
	dimred | dred | (dimensionality reduction)
		"DimensionalityReduction.nb"
	
	dirichlet distribution?
		"DirichletDistribution2.nb"
	
	lda | (latent dirichlet distribution)
		"LatentDirichletAllocation.nb"
	
	rideas | (recurring (ideas | themes)) -> "RecurringIdeas.nb"
	
	(homonymy | homonym | homonyms) -> "Homonymy.nb"
	
	metonymy -> "Metonymy.nb"
	
	(hyponymy | hyponym) | (hypernymy | hypernym)
		"HyponymyAndHypernymy.nb"
	
	("log linear" | "log-linear" | ((max | maximum) entropy markov)) models?
		"LogLinearModels.nb"
	
	afood | ((food | "fast food" | restaurant) (automation | autonomous | automated)) | ((automation | autonomous | automated) (food | "fast food" | restaurant))
		"FastFoodAutomation.nb"
	
	("part of speech" | pos) (tagging | tags | tag)
		"PartOfSpeechTagging.nb"
	
	(pos | "part of speech" | grammar | grammatical) (parsing | parser)
		"PosParsing.nb"
	
	glm | glms | (global linear models)
		"GlobalLinearModels.nb"
	
	(discriminative | conditional) models
		"DiscriminativeModels.nb"
	
	((generative | "joint probability") (models | modeling)) | ((models | modeling) (generative | "joint probability"))
		"GenerativeModels.nb"
	
	hmm | hmms | (hidden markov (models | model))
		"HiddenMarkovModels.nb"
	
	pcfgs | (probabilistic (cfg | cfgs | "context free grammar" | "context free grammars"))
		"PCFGs.nb"
	
	(trigger | triggers) -> "Trigger.nb"
	
	perceptron algorithm?
		"PerceptronAlgorithm.nb"
	
	dependency parsing
		"DependencyParsing.nb"
	
	crossing (dependency | dependencies)
		"CrossingDependency.nb"
	
	bns | (bayesian (networks | network))
		"BayesianNetworks.nb"
	
	deep learning for? ~nlu
		"DeepLearningForNLU.nb"
	
	NER | (named entity recognition)
		"NamedEntityRecognition.nb"
	
	distributed representations
		"DistributedRepresentations.nb"
	
	unsupervised learning?
		"UnsupervisedLearning.nb"
	
	(unsupervised ~nlu learning?) | (unsupervised learning? ~nlu) | (~nlu unsupervised learning?) | (~nlu learning? unsupervised) | (learning? unsupervised ~nlu) | (learning? ~nlu unsupervised)
		"UnsupervisedNlp.nb"
	
	(multi | multiple) (layer | layers | level | levels) ((of? representation) | model | models)?
		"MultiLayerRepresentation.nb"
	
	"pre training" | "pre-training" | "pre training" | (unsupervised ("pre training" | "pre-training" | pretraining))
		"UnsupervisedPreTraining.nb"
	
	autoencoders | (auto encoders) -> "Autoencoders.nb"
	
	supervised learning?
		"SupervisedLearning.nb"
	
	training data -> "TrainingData.nb"
	
	maxent | "max ent" | ((maximum | max) (entropy | ent))
		"MaximumEntropy.nb"
	
	entropy -> "Entropy.nb"
	
	softmax layer? -> "Softmax.nb"
	
	sigmoid | ((logistic | sigmoid) function)
		"LogisticFunction.nb"
	
	online learning -> "OnlineLearning.nb"
	
	batch learning -> "BatchLearning.nb"
	
	gradient (descent | ascent)
		"GradientDescent.nb"
	
	soft clustering -> "SoftClustering.nb"
	
	hard clustering -> "HardClustering.nb"
	
	neural word representation
		"NeuralWordRepresentation.nb"
	
	brain -> "Brain.nb"
	
	global probabilistic (inferencer | inference)
		"GlobalProbabilisticInferencer.nb"
	
	(seesaw | "see saw" | "see-saw" | resonant) (computation | solver | solving | inference)?
		"SeeSawComputation.nb"
	
	(generating | producing | finding | discovering | computing) word vectors
		"GeneratingWordVectors.nb"
	
	neural (net | nets) derivatives
		"NeuralNetDerivatives.nb"
	
	derivatives -> "Derivatives.nb"
	
	(phrase | sentence | clause | compositional) vectors
		"PhraseVectors.nb"
	
	("bm25" | "bm 25") -> "BM25.nb"
	
	("jcsat14" | "jcsat 14" | jcsat) -> "Jcsat14.nb"
	
	rnn word? vector (parser | parsing)
		"RnnVectorParser.nb"
	
	bts | (back propagation through structure)
		"BackPropagationThroughStructure.nb"
	
	~bp
		"Backpropagation.nb"
	
	(nc | "non continuous" | "non-continuous") objective function?
		"NonContinuousObjectiveFunction.nb"
	
	(subgradient | "sub gradient") method
		"SubgradientMethod.nb"
	
	("syntactically untied" | "syntactically-untied") rnn? vector (parser | parsing)
		"SyntacticallyUntiedRnnVectorParser.nb"
	
	(compositional | composition) vector grammar
		"CompositionalVectorGrammar.nb"
	
	"sp3" | (interdependent ~nn) -> "SP3.nb"
	
	factored parser -> "FactoredParser.nb"
	
	classify -> "Classify.nb"
	
	rnn paraphrase detection
		"RnnParaphraseDetection.nb"
	
	paraphrase detection
		"ParaphraseDetection.nb"
	
	(notebook | notebooks) (creation | creating)
		VaScore["NotebookCreation.nb", 0.9]
	
	local ("web server" | webserver) -> "LocalWebServer.nb"
	
	(("sorted hash association" | sha) (profiling | profile)) | ((profiling | profile) ("sorted hash association" | sha))
		"SortedHashAssociationProfiling.nb"
	
	java -> "Java.nb"
	
	eclipse | (wolfram? workbench) -> "Workbench.nb"
	
	(workbench | eclipse)? java code? formatting
		"WorkbenchJavaFormatting.nb"
	
	elasticsearch | (elastic search) -> "ElasticSearch.nb"
	
	LearnPattern | (learn pattern) -> "LearnPattern.nb"
	
	java? (deprecated | "@deprecated") -> "JavaDeprecated.nb"
	
	"inverse document frequency" | idf -> "idf.nb"
	
	(classifier | classification) -> "Classifier.nb"
	
	joint probability (equations | study)
		"JointProbability2.nb"
	
	(stemming | stem) -> "Stemming.nb"
	
	(lemmatisation | lematisation | lemmatization | lematization)
		"Lemmatisation.nb"
	
	(microsoft | ms | msft)? ~bot builder?
		"MicrosoftBotBuilder.nb"
	
	FormFlow | (form flow) -> "FormFlow.nb"
	
	chatbot (techniques | technologies | designs)
		"ChatbotTechniques.nb"
	
	luis -> "LUIS.nb"
	
	year? 2020 -> "Year2020.nb"
	
	year 2028 -> "Year2028.nb"
	
	WeakReference | (weak reference) -> "WeakReference.nb"
	
	spacex? ("mct bfr" | "bfr mct" | bfr | mct)
		"BfrMct.nb"
	
	eli -> "Eli.nb"
	
	eli -> "Eli.nb"
	
	tanh -> "tanh.nb"
	
	"MV-RNN" | "MV RNN" | ((matrix "-"? vector) | (matrix vector "-"?) | ("-"? matrix vector) | ("-"? vector matrix) | (vector matrix "-"?) | ((vector "-"? matrix) rnns))
		"MatrixVectorRnns.nb"
	
	sa | (sentiment (analysis | detection)?)
		"SentimentAnalysis.nb"
	
	relationship (classification | classifier)
		"RelationshipClassification.nb"
	
	RNTN | (recursive neural tensor network)
		"RecursiveNeuralTensorNetwork.nb"
	
	mechanical turk -> "MechanicalTurk.nb"
	
	drag and drop -> "DragAndDrop.nb"
	
	papers -> "Papers.nb"
	
	universal (dependencies | dependency | POS | "POS tagset" | "POS tagsets")
		"UniversalDependencies.nb"
	
	~multilang word (clusters | cluster)
		"Cross-LingualWordClusters.nb"
	
	malopa | (~multilang (parsing | parser))
		"MultilingualParsing.nb"
	
	nlm | (neural language (model | models))
		"NeuralLanguageModel.nb"
	
	rnn language model
		"RNNLanguageModel.nb"
	
	learning word senses
		"LearningWordSenses.nb"
	
	(ontology learning an?) | (ontology an? learning) | (learning ontology an?) | (learning an? ontology) | (an? ontology learning) | (an? learning ontology)
		"OntologyLearning.nb"
	
	overfitting -> "Overfitting.nb"
	
	underfitting -> "Underfitting.nb"
	
	(nonlinearities | nonlinearity | (non "-"? (linearities | linearity)))
		"Nonlinearities.nb"
	
	~nn parameter initialization
		"NNParameterInitialization.nb"
	
	rbm | (restricted boltzmann machines)
		"RestrictedBoltzmannMachines.nb"
	
	sgd | (stochastic gradient descent)
		"StochasticGradientDescent.nb"
	
	(lbfgs | "l-bfgs") -> "LBFGS.nb"
	
	learning (rate | rates) -> "LearningRate.nb"
	
	adagrad | (ada grad) -> "AdaGrad.nb"
	
	regularization -> "Regularization.nb"
	
	(coadaptation | "co-adaptation") -> "coadaptation.nb"
	
	dropout -> "Dropout.nb"
	
	accomplishments | yay | celebrate -> "Accomplishments.nb"
	
	compression -> "Compression.nb"
	
	compressing ~nn
		"CompressingNeuralNets.nb"
	
	hauto | homeauto | (home automation) -> "HomeAutomation.nb"
	
	dlearning | dl | (deep learning) -> "DeepLearning.nb"
	
	convoluted -> "Convoluted.nb"
	
	convolutional -> "Convolutional.nb"
	
	my computer -> "MyComputer.nb"
	
	(linguistic | nlu | nlp) (services | apis)
		"LinguisticServices.nb"
	
	perceptron -> "Perceptron.nb"
	
	sequence prediction
		"SequencePrediction.nb"
	
	(composition | compositional) -> "Composition.nb"
	
	(yann | yan | lecun) (yann | yan | lecun)?
		"YannLecun.nb"
	
	"Microns project" | (mapping the brain to build better machines)
		"MappingTheBrainToBuildBetterMachines.nb"
	
	buzz phrases -> "BuzzPhrases.nb"
	
	cortex | ((neocortex | "neo cortex")) -> "Neocortex.nb"
	
	microcircuits -> "Microcircuits.nb"
	
	pluto -> "Pluto.nb"
	
	visual cortex -> "VisualCortex.nb"
	
	local (minima | minimum | maxima | maximum)
		"LocalMinima.nb"
	
	cnn | cnns | ConvNet | (convolutional neural network)
		"ConvolutionalNeuralNetwork.nb"
	
	(relu | rectification) -> "ReLU.nb"
	
	google docs -> "GoogleDocs.nb"
	
	year 2035 -> "Year2035.nb"
	
	"context of symbol" | "contexts of symbols" | "resolving symbols" | (symbol to context)
		"SymbolToContext.nb"
	
	space (hotel | hotels) -> "SpaceHotel.nb"
	
	ba "-"? 330 -> "BA330.nb"
	
	launch cadence -> "LaunchCadence.nb"
	
	deep learning textbook
		"DeepLearningTextbook.nb"
	
	javadoc | (java doc) -> "JavaDoc.nb"
	
	satellite servicing
		"SatelliteServicing.nb"
	
	classification -> "Classification.nb"
	
	(~ts | search) evaluation
		"SearchEvaluation.nb"
	
	events -> "Events.nb"
	
	e | (eutelsat "-"? abs? "-"? 2?) -> "EutelsatAbs2.nb"
	
	trampoline -> "Trampoline.nb"
	
	(wl | m | mathematica)? (layout | ui) -> "Layout.nb"
	
	Dynamic | DynamicModule | (dynamic module)
		"DynamicModule.nb"
	
	(framed | frame | frames) -> "Framed.nb"
	
	ubi | (universal? basic income) -> "BasicIncome.nb"
	
	simple (clauses | clause) -> "SimpleClauses.nb"
	
	(projective | projection) (parsing | dependency | dependencies)?
		"ProjectiveParsing.nb"
	
	nutch -> "Nutch.nb"
	
	ivy -> "Ivy.nb"
	
	"web crawler" | (web? crawler)
		VaScore["WebCrawler.nb", 0.9]
	
	apache? velocity -> "ApacheVelocity.nb"
	
	LanguageIdentify | (language identify)
		"LanguageIdentify.nb"
	
	reinforcement learning?
		"ReinforcementLearning.nb"
	
	mdp | (markov decision (process | processes))
		"MarkovDecisionProcess.nb"
	
	(denoising | denoise | noise) (autoencoders | autoencoder)
		"DenoisingAutoencoders.nb"
	
	("sequence to sequence" | "sequence-to-sequence" | rnn) (autoencoders | autoencoder)
		"SequenceToSequenceAutoencoders.nb"
	
	variational (autoencoders | autoencoder)
		"VariationalAutoencoders.nb"
	
	generative adversarial (networks | network)
		"GenerativeAdversarialNetworks.nb"
	
	mcmc | (markov? chain? monte carlo)
		"MarkovChainMonteCarlo.nb"
	
	markov (chain | chains) -> "MarkovChain.nb"
	
	(ai | ml | intelligence) people -> "AIPeople.nb"
	
	(thaicom | thiacom) 8? -> "Thaicom8.nb"
	
	(mars ~spacex) | (~spacex mars) | (red dragon mars?) | (red mars? dragon) | (dragon red mars?) | (dragon mars? red) | (mars? red dragon) | (mars? dragon red)
		"RedDragon.nb"
	
	"f9" | (falcon 9) -> "Falcon9.nb"
	
	(lawn | yard | grass) maintenance?
		"LawnMaintenance.nb"
	
	(past | previous | old)? ~spacex? (flights | launches)
		"PastFlights.nb"
	
	~spacex? falcon? 9? landings -> "SpaceXLandings.nb"
	
	"crs9" | (crs 9) -> "CRS9.nb"
	
	(java (profiling | profile)) | ((profiling | profile) java)
		"JavaProfiling.nb"
	
	dryer -> "Dryer.nb"
	
	reading | "reading list" | (to be? read)
		"ToRead.nb"
	
	bopt | (bayesian optimization)
		"BayesianOptimization.nb"
	
	gaussian (process | processes)
		"GaussianProcess.nb"
	
	acquisition function
		"AcquisitionFunction.nb"
	
	(exploration vs exploitation) | (exploration exploitation vs) | (vs exploration exploitation) | (vs exploitation exploration) | (exploitation exploration vs) | (exploitation vs exploration)
		"ExplorationVsExploitation.nb"
	
	landed (stages | "first stages" | rockets | "falcon 9s")
		"LandedStages.nb"
	
	~ml (standalone | "stand alone" | alone)
		"MachineLearningStandalone.nb"
	
	viv -> "Viv.nb"
	
	viv primiere -> "VivPrimiere.nb"
	
	jira -> "Jira.nb"
	
	"image recognition" | (computer vision) -> "ComputerVision.nb"
	
	~spacex data -> "SpaceXData.nb"
	
	json "-"? ld -> "JSON-LD.nb"
	
	"resource description framework" | (rdf)
		"RDF.nb"
	
	"friend of a friend" | (foaf) -> "FOAF.nb"
	
	ub json -> "UbJson.nb"
	
	htm | (hierarchical temporal memory)
		"HierarchicalTemporalMemory.nb"
	
	SyntaxNet | (syntax net) -> "SyntaxNet.nb"
	
	parsey | mcparseface | (parsey mcparseface)
		"ParseyMcParseface.nb"
	
	universal (treebanks | treebank) project
		"UniversalTreebanksProject.nb"
	
	sherpa | (formosat) -> "Formosat.nb"
	
	((fairing | fairing | fairings) (reusability | reuse | reusing | recovery | recovering)) | ((reusability | reuse | reusing | recovery | recovering) (fairing | fairing | fairings))
		"FairingReusability.nb"
	
	"neo4j" -> "Neo4j.nb"
	
	graph (databases | database | db | dbs) -> "GraphDatabases.nb"
	
	"api.ai" -> "api.ai.nb"
	
	"api.ai" (and | "+")? slack integration?
		"Api.aiSlack.nb"
	
	~mye -> "MyEntities.nb"
	
	create new? project -> "CreateProject.nb"
	
	~mye types -> "MyeTypes.nb"
	
	myep | myeprop | (mye (properties | prop))
		"MyeProperties.nb"
	
	myei | "mye inst" | myeinst | (~mye (instances | instance))
		"MyeInstances.nb"
	
	monitor -> "Monitor.nb"
	
	ula -> "ULA.nb"
	
	"dragon 2" | (crew dragon) -> "CrewDragon.nb"
	
	jwst | (james webb telescope)
		"JamesWebbTelescope.nb"
	
	cloud -> "Cloud.nb"
	
	wifi | (wi "-"? fi) -> "Wi-Fi.nb"
	
	~mye (tasks | todo) -> "MyeTasks.nb"
	
	~mye ~ling -> "MyeLinguistic.nb"
	
	~mye basic ~ling
		"MyeBasicLinguistics.nb"
	
	~mye ~spacex data -> "MyeSpaceXData.nb"
	
	air taxi -> "AirTaxi.nb"
	
	(droneship | asds | ocisly) eta -> "DroneshipETA.nb"
	
	(biotech | bio | health | biology) -> "Biotech.nb"
	
	crs "-"? 11 -> "CRS11.nb"
	
	"disability insurance" | (insurance) -> "Insurance.nb"
	
	maluuba -> "Maluuba.nb"
	
	wplugin | (workbench plugin)
		"WorkbenchPlugin.nb"
	
	landing attempts
		"LandingAttempts.nb"
	
	kj | kij | (kijiji) -> "Kijiji.nb"
	
	references -> "References.nb"
	
	oop? interfaces -> "Interfaces.nb"
	
	code -> "Code.nb"
	
	testing tools -> "TestingTools.nb"
	
	cottage -> "Cottage.nb"
	
	cf | copyf | (copy (function | func)) -> "CopyFunction.nb"

	$lm | (($nlu | $lang) (models | modeling)) | nlpmodels
		"NlpModels.nb"
	old linguistics -> "OldLinguistics.nb"
	"watch movie" | (netflix ("match rank" | matchrank | movies | list | pairings))
		"E:\\Users\\Daniel\\Documents\\NetflixMatchRank.nb"
	civilization | civ | freeciv -> "Civilization.nb"
	optionals | opt | "optional linguistics|matching" | "optional support" | "optionals support" | optional -> "Optionals.nb"
	((copy|copying) (file|files) between computers) | ((copy|copying) (file|files) to (laptop|computer|(another computer))) | ((copy|copying) to (laptop|computer|(another computer))) -> "CopyingFilesBetweenComputers.nb"
	apple car -> "AppleCar.nb"
	"node.js" | node -> "Node.js.nb"
	jsx -> "JSX.nb"
	react -> "React.nb"
	jsfiddle -> "jsfiddle.nb"
	go | golang -> "Go.nb"
	docker -> "Docker.nb"
	containers | containerization -> "Containers.nb"
	kubernetes -> "Kubernetes.nb"
	dropbox nb|notebook -> "dropbox.nb"
	"amazon web services" | aws -> "AmazonWebServices.nb"
	"phone number" | phone -> "PhoneNumber.nb"
	pcfin -> "pcfin.nb"
	"danielbigham.ca" | "my website" | website | dbca -> "DanielBighamCa.nb"
	define|defining linguistic|linguistics -> "DefiningLinguistics.nb"
	how prototype -> "HowPrototype.nb"
	how analysis -> "HowAnalysis.nb"
	how | howto | "how-to" -> "How.nb"
	commercial crew -> "CommercialCrew.nb"
	"crew dragon" | "dragon2" -> "CrewDragon.nb"
	"dragon reuse" | "reusing dragon" -> "DragonReuse.nb"
	fairing reusability|reuse -> "FairingReusability.nb"
	"space hotel" | "space hotels" -> "spacehotel.nb"
	ba330 | "ba-330" | "ba 330" | b330 -> "ba330.nb"
	idea pad -> "IdeaPad.nb"
	homegroup | "home group" | "sharing files" | "share files" | "copying files between computers" -> "Homegroup.nb"
	"autonomous cars" | acars | "driverless cars" | "autonomous vehicles" -> "autonomouscars.nb"
	edit linguistic -> "EditLinguistic.nb"
	"existing linguistic" | ((lookup|get|find) linguistic) | ((lookup|get|find) existing linguistic) -> "ExistingLinguistic.nb"
	"formula finder" | "finding formulas" | "find a formula" -> "FormulaFinder.nb"
	"web games" | games -> "WebGames.nb"
	~jlang findings -> "JLangFindings.nb"
	~jlang inference -> "JLangInference.nb"
	accomplishments | accomplish | celebrate | acc -> "accomplishments.nb"
	(tech|"technology journal") | tjournal -> "TechJournal.nb"
	evs | "electric vehicles" -> "ElectricVehicles.nb"
	(moores|"moore's"|mores|"more's") law -> "MooresLaw.nb"
	transistor | transistors -> "Transistor.nb"
	cpu | cpus -> "CPU.nb"
	((action|parse|parser) result) | (evaluated action) -> "ActionResult.nb"
	chunk | chunks -> "Chunk.nb"
	(~jlang ("multi word"|"multi-word"|multiword) chunks) | (("multi word"|"multi-word"|multiword) chunks) -> "JLangMultiWordChunks.nb"
	common words -> "CommonWords.nb"
	~jlang evidence against -> "JLangEvidenceAgainst.nb"
	~jlang status -> "JITLanguageStatus.nb"
	"mothers with a heart for ethiopia" | mwahfe | mwah | mwh | mwhfe -> "MothersWithAHeartForEthiopia.nb"
	~jlang documentation|docs -> "JLangDocumentation.nb"
	about ~jlang -> "AboutJITLanguage.nb"
	(~jlang chunk types) | "chunk types" -> "ChunkTypes.nb"
	"user interface" | ui -> "UserInterface.nb"
	~jlang design -> "JITLanguageDesign.nb"
	"jit language" | jlang | jitlang -> "JITLanguage.nb"
	~nb log -> "NotebookLog.nb"
	log -> "Log.nb"
	~spx ("computational fluid dynamics"|cfd) -> "SpaceXComputationalFluidDynamicsSimultation.nb"
	top down | "top-down" -> "TopDown.nb"
	learn|learning as needed -> "LearnAsNeeded.nb"
	wl parsing -> "WLParsing.nb"
	grammar reload|reloading -> "GrammarReload.nb"
	"syntax errors" | "syntax error handling" -> "SyntaxErrorHandling.nb"
	meredith | mer | ((mer|meredith) (phone|cell) number?) -> "meredith.nb"
	camp schedule|schedules -> "CampSchedule.nb"
	main -> "Main.nb"
	"jcsat 14" | "jcsat-14" -> "Jcsat14.nb"
	(~spacex constellation) | constellation -> "SpaceXConstellation.nb"
	"falcon reuse" | "booster resuse" | reuse -> "FalconReuse.nb"
	lui regex -> "LuiRegex.nb"
	lui grammar -> "LuiGrammar.nb"
	antlr -> "antlr.nb"
	~new project -> "CreateProject.nb"
	"lui ambiguity" | ambiguity -> "LuiAmbiguity.nb"
	antlr parsing | antlr -> "Antlr.nb"
	family journal -> "familyjournal.nb"
	police | gcs | fraud | debt | claim | credit | creditor -> "Fraud.nb"
	lui documentation|doc|docs -> "LuiDocumentation.nb"
	"lui scoring" | scoring -> "LuiScoring.nb"
	elon mars unveil|unveiling -> "ElonMarsUnveil.nb"
	specific impulse -> "SpecificImpulse.nb"
	define linguistic hotkey -> "DefineLinguisticHotkey.nb"
	spacex -> "SpaceX.nb"
	lui -> "Lui.nb"
	create ~function -> "CreateFunction.nb"
	debug input -> "DebugInput.nb"
	aii -> "ai.nb"
	debug java -> "DebugJava.nb"