start:
	training report -> ReplayTrainingReport[]

	search for $name -> FileSearch[name]
	
	replace from=$quotedString with to=$quotedString in $dir
		StringReplaceInDir[dir, from, to]
	
	add opts|options
		AddOptions[GetClipboard[]]
	
	(search ~nbs for $name) | (search ~nbs $name) | (~nbs search $name)
		SearchNotebooks[name]
	
	key mappings
		OpenFileInWorkbench[
			FindFile["JitLang`UI`"],
			"Substring" -> "LetterToChunkType[letter_"
		]

	~jlang input=$quotedString
		JLang[input]
	
	word=$id "->" type=$id
		ChunkSet[word, "Type" -> type]
	
	(~jlang reinit) | (reload ~jlang) -> JLangReinit[]

	bullet -> NotebookWrite[SelectedNotebook[], Cell["", "Item"]]

	email $person -> ComposeEmail["To" -> person]
	email $person subject=$quotedString
		ComposeEmail["To" -> person, "Subject" -> subject]

	hello|hey|hi -> "Hello!"

	a=$webpage -> SystemOpen[a]
	
	~new ~nb name=($id|$quotedString)
		CreateIssueNotebook["Name" -> name]
	
	open ~nb name=($id|$quotedString)
		OpenNotebook[name]
	
	name=$notebook -> OpenNotebook[name]
	
	dir=$dir ~dir -> SystemOpen[dir]
	dir=$dir -> Scored[SystemOpen[dir], 0.7]
	
	~edit grammar|rules -> EditGrammar[]
	
	~edit $file -> EditFile[file]
	
	~edit file=$sourceFile
		If [StringFreeQ[file, "`"],
			HeldHead[EditFile][file]
			,
			HeldHead[EditFile][FindFile[file]]
		]
	
	~edit file=$sourceFile substring=$quotedString
		If [StringFreeQ[file, "`"],
			HeldHead[EditFile][file, "Substring" -> substring]
			,
			HeldHead[EditFile][FindFile[file], "Substring" -> substring]
		]
		
	file=$sourceFile
		Scored[
			If [StringFreeQ[file, "`"],
				HeldHead[EditFile][file]
				,
				HeldHead[EditFile][FindFile[file]]
			],
			0.6
		]
	
	add ling|linguistic -> AddLinguistic[]
	
	~edit $function -> EditFunction[function]
	
	ling=($quotedString|$id) "->" $url -> AddLinguistic[ling, "webpage", url]
	
	$url -> URL[url]
	
	run tests -> Print[RunUnitTests[FileNameDrop[FindFile["Lui`"], -2]]]
	
	run $id tests -> Print[RunUnitTests[FileNameDrop[FindFile[StringJoin[id, "`"]], -2]]]
	
	~new $sourceFile ~function name=$id "[" $funcArgs "]" $quotedString
		HeldHead[CreateFunctionInFile][
			FindFile[sourceFile], 
			StringJoin[name, "[", Riffle[funcArgs, ", "], "]"],
			"Description" -> quotedString
		]
		
	~new $sourceFile ~function name=$id "[" "]" $quotedString
		HeldHead[CreateFunctionInFile][
			FindFile[sourceFile], 
			StringJoin[name, "[]"],
			"Description" -> quotedString
		]
		
	"work on"|wo|w $function -> WorkOn["Function", function]
	
	delete ~nb -> DeleteCurrentNotebook[]
	
	$sourceCodeDirectory
	
	~new $sourceCodeDirectory file name=($id|$quotedString)
		CreateSourceFile[
			name,
			sourceCodeDirectory
		]
	
	~new ~project $name
		CreateProject[
			{
				"Directory" -> $ProjectsDir,
				"ParentPackage" -> "",
				"Linguistic" -> "not supported yet"
			},
			name
		]
	
	$app
		SystemOpen[app]
	
	~new ~syn $id
		DefineLinguistic[
			"Linguistic" -> id,
			"Symbol" -> StringJoin["~", id],
			"Expression" -> Null
		]

name: $id|$quotedString

funcArgs:
	$id -> {id}
	$funcArgs "," $id -> Append[funcArgs, id]

file:
	$id
	a=$id "." b=$id -> StringJoin[a, ".", b]

function:
	$id
		With[{symbol = StringToSymbol[id]},
			If [symbol =!= $Failed && DownValues[symbol] =!= {},
				symbol
				,
				$Failed
			]
		]
	~function $function
	$function ~function

~function: function|func|fn
~func: ~function

~new: create|new

~nb: notebook|nb

~nbs: notebooks|nbs|notebook|nb

~dir: directory|dir

~open: open|"go to"|display

~edit: edit|e

~webpage: webpage|website

~spacex: spacex|spx|"space x"
~spx: spacex|spx|"space x"

~project: proj|project
~proj: proj|project

~jlang: "jit language" | jlang | jlanguage | jitlang | jit

~syn: synonym | syn

directory:
	downloads -> "E:\\Users\\Daniel\\Downloads"
