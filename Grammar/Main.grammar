start:
	start how ahk -> SystemOpen["E:\\Users\\Daniel\\Dropbox\\Projects\\How\\autohotkey\\how.ahk"]
	
	createAddAnswerUi -> EditFile["E:\\Users\\Daniel\\Dropbox\\Projects\\How\\js\\add_answer.js", "Substring" -> "function createAddAnswerUi"]

	reset how log -> ResetHowLog[]
	
	(new|create)? js|javascript str|string -> CreateMultilineJavaScriptString[]
	
	java str|string -> CreateMultilineJavaString[]
	
	to|create|new multiline? java string
		CopyToClipboard[CreateMultiLineJavaString[GetClipboard[]]]

	google query=$quotedString
		HeldHead[SystemOpen][StringJoin["https://www.google.ca/search?sourceid=chrome-psyapi2&ion=1&espv=2&ie=UTF-8&q=", query]]

	training report -> ReplayTrainingReport[]

	search for $name -> SearchFiles[name]
	search $dir for $name -> SearchFiles[name, "Directories" -> {dir}]
	
	replace from=$quotedString with to=$quotedString in $dir
		StringReplaceInDir[dir, from, to]
	
	add opts|options
		AddOptions[GetClipboard[]]
	
	(search ~nbs for $name) | (search ~nbs $name) | (~nbs search $name)
		SearchNotebooks[name]
	
	key mappings
		OpenFileInWorkbench[
			FindFile["JitLang`UI`"],
			"Substring" -> "LetterToChunkType[letter_"
		]

	~jlang input=$quotedString
		JLang[input]
	
	word=$id "->" type=$id
		ChunkSet[word, "Type" -> type]
	
	(~jlang reinit) | (reload ~jlang) -> JLangReinit[]

	bullet -> NotebookWrite[SelectedNotebook[], Cell["", "Item"]]

	email $person -> ComposeEmail["To" -> person]
	email $person subject=$quotedString
		ComposeEmail["To" -> person, "Subject" -> subject]

	hello|hey|hi -> "Hello!"

	a=$webpage -> SystemOpen[a]
	
	~new ~nb name=($id|$quotedString)
		CreateIssueNotebook["Name" -> name]
	
	open ~nb name=($id|$quotedString)
		OpenNotebook[name]
	
	name=$notebook -> OpenNotebook[name]
	
	dir=$dir -> Scored[SystemOpen[dir], 0.7]
	
	~edit grammar|rules -> EditGrammar[]
	
	~edit $file -> EditFile[file]
	
	~edit file=$sourceFile
		If [StringFreeQ[file, "`"],
			HeldHead[EditFile][file]
			,
			HeldHead[EditFile][FindFile[file]]
		]
	
	~edit file=$sourceFile substring=$quotedString
		If [StringFreeQ[file, "`"],
			HeldHead[EditFile][file, "Substring" -> substring]
			,
			HeldHead[EditFile][FindFile[file], "Substring" -> substring]
		]
		
	file=$sourceFile substring=$quotedString
		Scored[
			If [StringFreeQ[file, "`"],
				HeldHead[EditFile][file, "Substring" -> substring]
				,
				HeldHead[EditFile][FindFile[file, "Substring" -> substring]]
			],
			0.6
		]
		
	file=$sourceFile
		Scored[
			If [StringFreeQ[file, "`"],
				HeldHead[EditFile][file]
				,
				HeldHead[EditFile][FindFile[file]]
			],
			0.6
		]
	
	add ling|linguistic -> AddLinguistic[]
	
	~edit $function -> EditFunction[function]
	
	ling=($quotedString|$id) "->" $url -> AddLinguistic[ling, "webpage", url]
	
	$url -> URL[url]
	
	run tests -> Print[RunUnitTests[FileNameDrop[FindFile["Lui`"], -2]]]
	
	run $id tests -> Print[RunUnitTests[FileNameDrop[FindFile[StringJoin[id, "`"]], -2]]]
	
	~new $sourceFile ~function name=$id "[" $funcArgs "]" $quotedString
		HeldHead[CreateFunctionInFile][
			FindFile[sourceFile], 
			StringJoin[name, "[", Riffle[funcArgs, ", "], "]"],
			"Description" -> quotedString
		]
		
	~new $sourceFile ~function name=$id "[" "]" $quotedString
		HeldHead[CreateFunctionInFile][
			FindFile[sourceFile], 
			StringJoin[name, "[]"],
			"Description" -> quotedString
		]
		
	"work on"|wo|w $function -> WorkOn["Function", function]
	
	delete ~nb -> DeleteCurrentNotebook[]
	
	$sourceCodeDirectory
	
	~new $sourceCodeDirectory file name=($id|$quotedString)
		CreateSourceFile[
			name,
			sourceCodeDirectory
		]
	
	~new ~project $name
		CreateProject[
			{
				"Directory" -> $ProjectsDir,
				"ParentPackage" -> "",
				"Linguistic" -> "not supported yet"
			},
			name
		]
	
	$app
		SystemOpen[app]
	
	~new ~syn $id
		DefineLinguistic[
			"Linguistic" -> id,
			"Symbol" -> StringJoin["~", id],
			"Expression" -> Null
		]
	
	ftp
		HeldHead[RunProcess][{"E:\\Program Files (x86)\\FileZilla FTP Client\\filezilla.exe", "--site=\"0/CWH\""}]

dir:
	dir=$directory ~dir -> dir
	$directory

name: $id|$quotedString

funcArgs:
	$id -> {id}
	$funcArgs "," $id -> Append[funcArgs, id]

file:
	$id
	a=$id "." b=$id -> StringJoin[a, ".", b]

function:
	$id
		With[{symbol = StringToSymbol[id]},
			If [symbol =!= $Failed && DownValues[symbol] =!= {},
				symbol
				,
				$Failed
			]
		]
	~function $function
	$function ~function

~function: function|func|fn
~func: ~function

~new: create|new

~nb: notebook|nb

~nbs: notebooks|nbs|notebook|nb

~dir: directory|dir

~open: open|"go to"|display

~edit: edit|e

~webpage: webpage|website

~spacex: spacex|spx|"space x"
~spx: spacex|spx|"space x"

~project: proj|project
~proj: proj|project

~jlang: "jit language" | jlang | jlanguage | jitlang | jit

~syn: synonym | syn

~curt:
	(curt | curtis) | ((curt | curtis) beattie)
		"CurtisBeattie"
~login:
	login | username | "user name" | password | account
		None
~bb:
	bb | blackberry | "black berry" -> "BlackBerry"
~bb10:
	~bb 10 -> "BlackBerry10"
~ps:
	photostar | "photo star" | ps -> "PhotoStar"
~bb10:
	~bb | ~bb10 -> "BlackBerry"
~sb:
	sabbatical | sb -> "Sabbatical"
~its:
	(its | iTunesSync | "iTunes Sync") "sync for itunes"
		None
~ml:
	"machine learning" | ml -> "MachineLearning"
~markov:
	markov | (markov (model | models)) -> "MarkovModels"
~kn:
	kn | "kneser ney" | "kneser-ney" -> "KneserNey"
~lang:
	language | lang
~impl:
	implementation | imp | impl
~fb:
	(fb | facebook | "face book") page?
~lm:
	lm | (~lang (model | modelling | modeling))
~nlu:
	nlu | nlp | "natural language understanding" | "natural language processing"
~wl:
	wl | "wolfram language" -> "WolframLanguage"
~libri:
	librispeech | "libri speech" | libri
~ling:
	linguistics | linguistic | ling | xxxxx
~spacex:
	spacex | "space x" | sx | spx | spcx
~classify:
	classify | classifier | classification
~bp:
	"back propagation" | backpropagation | "back propogation" | backpropogation
		"BackPropagation"
~nn:
	"neural nets" | "neural net" | NN | NNs -> "NeuralNetwork"
~wdocs:
	"wolfram docs" | wdocs | wdoc | ((wl | m | mathematica | wolfram) (docs | doc | documentation | help | "help pages"))
		"WolframDocumentation"
~multilang:
	"cross-lingual" | "cross lingual" | "multi-lingual" | "multi lingual" | "multi language" | "multi-language"
~nn:
	nn | "neural networks" | "neural network"
~bot:
	bot | bots | chatbots | chatbot | "chat bot" | "chat bots"
~mye:
	mye
	enitites
	entity
	"my entities"

~chandler:
	chandler | ch | mowat | "chandler mowat"

~digitalocean:
	"digital ocean" | digitalocean | do

~do:
	~digitalocean
notebook:
	npm | node | "node.js" -> "npm.nb"
