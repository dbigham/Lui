start:
	(new|create)? js|javascript str|string -> CreateMultilineJavaScriptString[]
	
	java str|string -> CreateMultilineJavaString[]
	
	to|create|new multiline? java string
		CopyToClipboard[CreateMultiLineJavaString[GetClipboard[]]]

	google query=$quotedString
		HeldHead[SystemOpen][StringJoin["https://www.google.ca/search?sourceid=chrome-psyapi2&ion=1&espv=2&ie=UTF-8&q=", query]]

	search for $name -> SearchFiles[name]
	(search $dir for $name) | (search for $name in $dir) -> SearchFiles[name, "Directories" -> {dir}]
	
	replace from=$quotedString with to=$quotedString in $dir
		StringReplaceInDir[dir, from, to]
	
	add opts|options
		AddOptions[GetClipboard[]]
	
	(search ~nbs for $name) | (search ~nbs $name) | (~nbs search $name)
		SearchNotebooks[name]
	
	word=$id "->" type=$id
		ChunkSet[word, "Type" -> type]
	
	(~jlang reinit) | (reload ~jlang) -> JLangReinit[]

	bullet -> NotebookWrite[SelectedNotebook[], Cell["", "Item"]]

	email $person -> ComposeEmail["To" -> person]
	email $person subject=$quotedString
		ComposeEmail["To" -> person, "Subject" -> subject]

	hello|hey|hi -> "Hello!"

	a=$webpage -> SystemOpen[a]
	
	~new ~nb name=($id|$quotedString)
		CreateIssueNotebook["Name" -> name]
	
	open? ~nb? name=($id|$quotedString) ~nb?
		OpenNotebook[name]

    name=($id|$quotedString) ~nb
        OpenNotebook[name]
	
	name=$notebook -> OpenNotebook[name]
	
	dir=$dir -> Scored[SystemOpen[dir], 0.7]
	
	~edit grammar|rules -> EditGrammar[]
	
	~edit $file -> EditFile[file]
	
	~edit file=$sourceFile
		If [StringFreeQ[file, "`"],
			HeldHead[EditFile][file]
			,
			HeldHead[EditFile][FindFile[file]]
		]
	
	~edit file=($file|$sourceFile) substring=$quotedString
		If [StringFreeQ[file, "`"],
			HeldHead[EditFile][file, "Substring" -> substring]
			,
			HeldHead[EditFile][FindFile[file], "Substring" -> substring]
		]
	
	file=$sourceFile substring=$quotedString
		Scored[
			If [StringFreeQ[file, "`"],
				HeldHead[EditFile][file, "Substring" -> substring]
				,
				HeldHead[EditFile][FindFile[file, "Substring" -> substring]]
			],
			0.6
		]
		
	file=$sourceFile
		Scored[
			If [StringFreeQ[file, "`"],
				HeldHead[EditFile][file]
				,
				HeldHead[EditFile][FindFile[file]]
			],
			0.6
		]
	
	add ling|linguistic -> AddLinguistic[]
	
	~edit $function -> EditFunction[function]
	
	ling=($quotedString|$id) "->" $url -> AddLinguistic[ling, "webpage", url]
	
	$url -> URL[url]
	
	run unit? tests -> Print[RunUnitTests[]]
	
	run (all|every) unit? tests -> Print[RunUnitTests["IncludeSlowTests" -> True]]
	
	run $id tests -> Print[RunUnitTests[FileNameDrop[FindFile[StringJoin[id, "`"]], -2]]]
	
	~new $sourceFile ~function name=$id "[" $funcArgs "]" $quotedString
		HeldHead[CreateFunction][
			FindFile[sourceFile], 
			StringJoin[name, "[", Riffle[funcArgs, ", "], "]"],
			quotedString
		]
	
	~new $sourceFile ~function name=$id "[" "]" $quotedString
		HeldHead[CreateFunction][
			FindFile[sourceFile], 
			StringJoin[name, "[]"],
			quotedString
		]
	
	"work on"|wo|w $function -> WorkOn[function]
	
	delete ~nb -> DeleteCurrentNotebook[]
	
	~new $sourceCodeDirectory file name=($id|$quotedString)
		CreateSourceFile[
			name,
			sourceCodeDirectory
		]
	
	~new ~project $name
		CreateProject[
			{
				"Directory" -> $ProjectsDir,
				"ParentPackage" -> "",
				"Linguistic" -> "not supported yet"
			},
			name
		]
	
	$app
		SystemOpen[app]
	
	~new ~syn $id
		DefineLinguistic[
			"Linguistic" -> id,
			"Symbol" -> StringJoin["~", id],
			"Expression" -> Null
		]

~project
    project
    proj

~syn:
    syn
    synonym

dir:
	dir=$directory ~dir -> dir
	$directory

name: $id|$quotedString

funcArgs:
	$id -> {id}
	$funcArgs "," $id -> Append[funcArgs, id]

file:
	$id
	a=$id "." b=$id -> StringJoin[a, ".", b]

function:
	$id
		With[{symbol = StringToSymbol[id]},
			If [symbol =!= $Failed && DownValues[symbol] =!= {},
				symbol
				,
				$Failed
			]
		]
	~function $function
	$function ~function

~function: function|func|fn
~func: ~function

~new: create|new

~nb: notebook|nb

~nbs: notebooks|nbs|notebook|nb

~dir: directory|dir

~open: open|"go to"|display

~edit: edit|e

~webpage: webpage|website

~wl:
	wl | "wolfram language" -> "WolframLanguage"

~js
	java script
	javascript
	js

~ui
	ui
	user interface

~libraries
	libraries
	libs
	frameworks

~db
	database
	db

~m
	~wl | m | mathematica | wolfram